// @ts-nocheck
import esbuildWasm from"https://cdn.jsdelivr.net/npm/esbuild-wasm@0.25.5/+esm";async function loadScript(e){const t=await fetch(e);if(!t.ok)throw new Error(`Failed to load ${e}`);return await t.text()}async function buildAndInject(){await esbuildWasm.initialize({wasmURL:"https://cdn.jsdelivr.net/npm/esbuild-wasm@0.25.5/esbuild.wasm"});const e=new URL("./jscripts/main.js",document.baseURI).href,t=await loadScript(e),n={name:"remote-loader",setup(t){t.onResolve({filter:/^(\.\/|\.\.\/)/},(t=>{try{const n=t.importer&&t.importer.startsWith("http")?t.importer:e;return{path:new URL(t.path,n).toString(),namespace:"remote"}}catch(e){return console.error("URL resolution error:",e,"args:",t),{errors:[{text:"Invalid base URL in onResolve"}]}}})),t.onLoad({filter:/.*/,namespace:"remote"},(async e=>({contents:await loadScript(e.path),loader:"js"})))}},o=await esbuildWasm.build({stdin:{contents:t,sourcefile:e,resolveDir:"/",loader:"js"},bundle:!0,write:!1,minify:!0,inject:["./jquery@1.12.4.js"],treeShaking:!0,target:["esnext"],plugins:[n]});for(const e of o.outputFiles){const t=(new TextDecoder).decode(e.contents),n=document.createElement("script");n.type="module",n.textContent=t,document.body.append(n)}}document.addEventListener("DOMContentLoaded",buildAndInject);